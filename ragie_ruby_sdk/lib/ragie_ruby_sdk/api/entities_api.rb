=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class EntitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Instruction
    # Create a new instruction. Instructions are applied to documents as they are created or updated. The results of the instruction are stored as structured data in the schema defined by the `entity_schema` parameter. The `prompt` parameter is a natural language instruction which will be applied to documents. This feature is in beta and may change in the future.
    # @param create_instruction_params [CreateInstructionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Instruction]
    def create_instruction(create_instruction_params, opts = {})
      data, _status_code, _headers = create_instruction_with_http_info(create_instruction_params, opts)
      data
    end

    # Create Instruction
    # Create a new instruction. Instructions are applied to documents as they are created or updated. The results of the instruction are stored as structured data in the schema defined by the &#x60;entity_schema&#x60; parameter. The &#x60;prompt&#x60; parameter is a natural language instruction which will be applied to documents. This feature is in beta and may change in the future.
    # @param create_instruction_params [CreateInstructionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Instruction, Integer, Hash)>] Instruction data, response status code and response headers
    def create_instruction_with_http_info(create_instruction_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.create_instruction ...'
      end
      # verify the required parameter 'create_instruction_params' is set
      if @api_client.config.client_side_validation && create_instruction_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_instruction_params' when calling EntitiesApi.create_instruction"
      end
      # resource path
      local_var_path = '/instructions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_instruction_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Instruction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.create_instruction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#create_instruction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Instruction
    # Delete an instruction. This will delete the instruction and all entities generated by it. This operation is irreversible.
    # @param instruction_id [String] The ID of the instruction.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def delete_instruction(instruction_id, opts = {})
      data, _status_code, _headers = delete_instruction_with_http_info(instruction_id, opts)
      data
    end

    # Delete Instruction
    # Delete an instruction. This will delete the instruction and all entities generated by it. This operation is irreversible.
    # @param instruction_id [String] The ID of the instruction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def delete_instruction_with_http_info(instruction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.delete_instruction ...'
      end
      # verify the required parameter 'instruction_id' is set
      if @api_client.config.client_side_validation && instruction_id.nil?
        fail ArgumentError, "Missing the required parameter 'instruction_id' when calling EntitiesApi.delete_instruction"
      end
      # resource path
      local_var_path = '/instructions/{instruction_id}'.sub('{' + 'instruction_id' + '}', CGI.escape(instruction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.delete_instruction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#delete_instruction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Extracted Entities
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [EntityList]
    def list_entities_by_document(document_id, opts = {})
      data, _status_code, _headers = list_entities_by_document_with_http_info(document_id, opts)
      data
    end

    # Get Document Extracted Entities
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(EntityList, Integer, Hash)>] EntityList data, response status code and response headers
    def list_entities_by_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.list_entities_by_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling EntitiesApi.list_entities_by_document"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EntitiesApi.list_entities_by_document, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EntitiesApi.list_entities_by_document, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/documents/{document_id}/entities'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.list_entities_by_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#list_entities_by_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Instruction Extracted Entities
    # @param instruction_id [String] The ID of the instruction.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [EntityList]
    def list_entities_by_instruction(instruction_id, opts = {})
      data, _status_code, _headers = list_entities_by_instruction_with_http_info(instruction_id, opts)
      data
    end

    # Get Instruction Extracted Entities
    # @param instruction_id [String] The ID of the instruction.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(EntityList, Integer, Hash)>] EntityList data, response status code and response headers
    def list_entities_by_instruction_with_http_info(instruction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.list_entities_by_instruction ...'
      end
      # verify the required parameter 'instruction_id' is set
      if @api_client.config.client_side_validation && instruction_id.nil?
        fail ArgumentError, "Missing the required parameter 'instruction_id' when calling EntitiesApi.list_entities_by_instruction"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EntitiesApi.list_entities_by_instruction, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EntitiesApi.list_entities_by_instruction, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/instructions/{instruction_id}/entities'.sub('{' + 'instruction_id' + '}', CGI.escape(instruction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.list_entities_by_instruction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#list_entities_by_instruction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Instructions
    # List all instructions.
    # @param [Hash] opts the optional parameters
    # @return [Array<Instruction>]
    def list_instructions(opts = {})
      data, _status_code, _headers = list_instructions_with_http_info(opts)
      data
    end

    # List Instructions
    # List all instructions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Instruction>, Integer, Hash)>] Array<Instruction> data, response status code and response headers
    def list_instructions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.list_instructions ...'
      end
      # resource path
      local_var_path = '/instructions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Instruction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.list_instructions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#list_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Instruction
    # @param instruction_id [String] The ID of the instruction.
    # @param update_instruction_params [UpdateInstructionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Instruction]
    def update_instruction(instruction_id, update_instruction_params, opts = {})
      data, _status_code, _headers = update_instruction_with_http_info(instruction_id, update_instruction_params, opts)
      data
    end

    # Update Instruction
    # @param instruction_id [String] The ID of the instruction.
    # @param update_instruction_params [UpdateInstructionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Instruction, Integer, Hash)>] Instruction data, response status code and response headers
    def update_instruction_with_http_info(instruction_id, update_instruction_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.update_instruction ...'
      end
      # verify the required parameter 'instruction_id' is set
      if @api_client.config.client_side_validation && instruction_id.nil?
        fail ArgumentError, "Missing the required parameter 'instruction_id' when calling EntitiesApi.update_instruction"
      end
      # verify the required parameter 'update_instruction_params' is set
      if @api_client.config.client_side_validation && update_instruction_params.nil?
        fail ArgumentError, "Missing the required parameter 'update_instruction_params' when calling EntitiesApi.update_instruction"
      end
      # resource path
      local_var_path = '/instructions/{instruction_id}'.sub('{' + 'instruction_id' + '}', CGI.escape(instruction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_instruction_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Instruction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"EntitiesApi.update_instruction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#update_instruction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
