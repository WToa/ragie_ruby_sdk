=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class AuthenticatorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Authenticator
    # Create White labeled connector credentials
    # @param payload [Payload] 
    # @param [Hash] opts the optional parameters
    # @return [BaseGetAuthenticator]
    def create_authenticator(payload, opts = {})
      data, _status_code, _headers = create_authenticator_with_http_info(payload, opts)
      data
    end

    # Create Authenticator
    # Create White labeled connector credentials
    # @param payload [Payload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseGetAuthenticator, Integer, Hash)>] BaseGetAuthenticator data, response status code and response headers
    def create_authenticator_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticatorsApi.create_authenticator ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AuthenticatorsApi.create_authenticator"
      end
      # resource path
      local_var_path = '/authenticators'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payload)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseGetAuthenticator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"AuthenticatorsApi.create_authenticator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticatorsApi#create_authenticator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Authenticator Connection
    # Create a connector for a given authenticator. This requires credentials dependent on the provider. For google drive it is a refresh token.
    # @param authenticator_id [String] 
    # @param create_authenticator_connection [CreateAuthenticatorConnection] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def create_authenticator_connection(authenticator_id, create_authenticator_connection, opts = {})
      data, _status_code, _headers = create_authenticator_connection_with_http_info(authenticator_id, create_authenticator_connection, opts)
      data
    end

    # Create Authenticator Connection
    # Create a connector for a given authenticator. This requires credentials dependent on the provider. For google drive it is a refresh token.
    # @param authenticator_id [String] 
    # @param create_authenticator_connection [CreateAuthenticatorConnection] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def create_authenticator_connection_with_http_info(authenticator_id, create_authenticator_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticatorsApi.create_authenticator_connection ...'
      end
      # verify the required parameter 'authenticator_id' is set
      if @api_client.config.client_side_validation && authenticator_id.nil?
        fail ArgumentError, "Missing the required parameter 'authenticator_id' when calling AuthenticatorsApi.create_authenticator_connection"
      end
      # verify the required parameter 'create_authenticator_connection' is set
      if @api_client.config.client_side_validation && create_authenticator_connection.nil?
        fail ArgumentError, "Missing the required parameter 'create_authenticator_connection' when calling AuthenticatorsApi.create_authenticator_connection"
      end
      # resource path
      local_var_path = '/authenticators/{authenticator_id}/connection'.sub('{' + 'authenticator_id' + '}', CGI.escape(authenticator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_authenticator_connection)

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"AuthenticatorsApi.create_authenticator_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticatorsApi#create_authenticator_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Authenticator
    # Delete an authenticator. This requires all connections created by that authenticator to be deleted first.
    # @param authenticator_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseOK]
    def delete_authenticator_connection(authenticator_id, opts = {})
      data, _status_code, _headers = delete_authenticator_connection_with_http_info(authenticator_id, opts)
      data
    end

    # Delete Authenticator
    # Delete an authenticator. This requires all connections created by that authenticator to be deleted first.
    # @param authenticator_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseOK, Integer, Hash)>] ResponseOK data, response status code and response headers
    def delete_authenticator_connection_with_http_info(authenticator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticatorsApi.delete_authenticator_connection ...'
      end
      # verify the required parameter 'authenticator_id' is set
      if @api_client.config.client_side_validation && authenticator_id.nil?
        fail ArgumentError, "Missing the required parameter 'authenticator_id' when calling AuthenticatorsApi.delete_authenticator_connection"
      end
      # resource path
      local_var_path = '/authenticators/{authenticator_id}'.sub('{' + 'authenticator_id' + '}', CGI.escape(authenticator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseOK'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"AuthenticatorsApi.delete_authenticator_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticatorsApi#delete_authenticator_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Authenticators
    # List all authenticators sorted by created_at in descending order. Results are paginated with a max limit of 100. When more authenticators are available, a `cursor` will be provided. Use the `cursor` parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @return [AuthenticatorList]
    def list_authenticators(opts = {})
      data, _status_code, _headers = list_authenticators_with_http_info(opts)
      data
    end

    # List Authenticators
    # List all authenticators sorted by created_at in descending order. Results are paginated with a max limit of 100. When more authenticators are available, a &#x60;cursor&#x60; will be provided. Use the &#x60;cursor&#x60; parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @return [Array<(AuthenticatorList, Integer, Hash)>] AuthenticatorList data, response status code and response headers
    def list_authenticators_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticatorsApi.list_authenticators ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AuthenticatorsApi.list_authenticators, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AuthenticatorsApi.list_authenticators, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/authenticators'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticatorList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"AuthenticatorsApi.list_authenticators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticatorsApi#list_authenticators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
