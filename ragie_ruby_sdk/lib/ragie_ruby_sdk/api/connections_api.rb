=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class ConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Connection
    # Create a connection. This is only for non-oauth connections such as S3 compatible connections, Freshdesk, and Zendesk.
    # @param public_create_connection [PublicCreateConnection] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def create_connection(public_create_connection, opts = {})
      data, _status_code, _headers = create_connection_with_http_info(public_create_connection, opts)
      data
    end

    # Create Connection
    # Create a connection. This is only for non-oauth connections such as S3 compatible connections, Freshdesk, and Zendesk.
    # @param public_create_connection [PublicCreateConnection] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def create_connection_with_http_info(public_create_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_connection ...'
      end
      # verify the required parameter 'public_create_connection' is set
      if @api_client.config.client_side_validation && public_create_connection.nil?
        fail ArgumentError, "Missing the required parameter 'public_create_connection' when calling ConnectionsApi.create_connection"
      end
      # resource path
      local_var_path = '/connection'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(public_create_connection)

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Oauth Redirect Url
    # Creates a redirect url to redirect the user to when initializing an embedded connector.
    # @param o_auth_url_create [OAuthUrlCreate] 
    # @param [Hash] opts the optional parameters
    # @return [OAuthUrlResponse]
    def create_oauth_redirect_url_connections_oauth_post(o_auth_url_create, opts = {})
      data, _status_code, _headers = create_oauth_redirect_url_connections_oauth_post_with_http_info(o_auth_url_create, opts)
      data
    end

    # Create Oauth Redirect Url
    # Creates a redirect url to redirect the user to when initializing an embedded connector.
    # @param o_auth_url_create [OAuthUrlCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthUrlResponse, Integer, Hash)>] OAuthUrlResponse data, response status code and response headers
    def create_oauth_redirect_url_connections_oauth_post_with_http_info(o_auth_url_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_oauth_redirect_url_connections_oauth_post ...'
      end
      # verify the required parameter 'o_auth_url_create' is set
      if @api_client.config.client_side_validation && o_auth_url_create.nil?
        fail ArgumentError, "Missing the required parameter 'o_auth_url_create' when calling ConnectionsApi.create_oauth_redirect_url_connections_oauth_post"
      end
      # resource path
      local_var_path = '/connections/oauth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(o_auth_url_create)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthUrlResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_oauth_redirect_url_connections_oauth_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_oauth_redirect_url_connections_oauth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Connection
    # Schedules a connection to be deleted. You can choose to keep the files from the connection or delete them all. If you keep the files, they will no longer be associated to the connection. Deleting can take some time, so you will still see files for a bit after this is called.
    # @param connection_id [String] 
    # @param delete_connection_payload [DeleteConnectionPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def delete_connection_connections_connection_id_delete_post(connection_id, delete_connection_payload, opts = {})
      data, _status_code, _headers = delete_connection_connections_connection_id_delete_post_with_http_info(connection_id, delete_connection_payload, opts)
      data
    end

    # Delete Connection
    # Schedules a connection to be deleted. You can choose to keep the files from the connection or delete them all. If you keep the files, they will no longer be associated to the connection. Deleting can take some time, so you will still see files for a bit after this is called.
    # @param connection_id [String] 
    # @param delete_connection_payload [DeleteConnectionPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def delete_connection_connections_connection_id_delete_post_with_http_info(connection_id, delete_connection_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.delete_connection_connections_connection_id_delete_post ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.delete_connection_connections_connection_id_delete_post"
      end
      # verify the required parameter 'delete_connection_payload' is set
      if @api_client.config.client_side_validation && delete_connection_payload.nil?
        fail ArgumentError, "Missing the required parameter 'delete_connection_payload' when calling ConnectionsApi.delete_connection_connections_connection_id_delete_post"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/delete'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_connection_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.delete_connection_connections_connection_id_delete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#delete_connection_connections_connection_id_delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Connection
    # Get a connection.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def get_connection_connections_connection_id_get(connection_id, opts = {})
      data, _status_code, _headers = get_connection_connections_connection_id_get_with_http_info(connection_id, opts)
      data
    end

    # Get Connection
    # Get a connection.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def get_connection_connections_connection_id_get_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_connection_connections_connection_id_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.get_connection_connections_connection_id_get"
      end
      # resource path
      local_var_path = '/connections/{connection_id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_connection_connections_connection_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_connection_connections_connection_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Connection Stats
    # Lists connection stats: total documents active documents, total active pages.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConnectionStats]
    def get_connection_stats_connections_connection_id_stats_get(connection_id, opts = {})
      data, _status_code, _headers = get_connection_stats_connections_connection_id_stats_get_with_http_info(connection_id, opts)
      data
    end

    # Get Connection Stats
    # Lists connection stats: total documents active documents, total active pages.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionStats, Integer, Hash)>] ConnectionStats data, response status code and response headers
    def get_connection_stats_connections_connection_id_stats_get_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_connection_stats_connections_connection_id_stats_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.get_connection_stats_connections_connection_id_stats_get"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/stats'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectionStats'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_connection_stats_connections_connection_id_stats_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_connection_stats_connections_connection_id_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Connection Source Types
    # List available connection source types like 'google_drive' and 'notion' along with their metadata
    # @param [Hash] opts the optional parameters
    # @return [ListConnectorSourceTypeInfo]
    def list_connection_source_types_connections_source_type_get(opts = {})
      data, _status_code, _headers = list_connection_source_types_connections_source_type_get_with_http_info(opts)
      data
    end

    # List Connection Source Types
    # List available connection source types like &#39;google_drive&#39; and &#39;notion&#39; along with their metadata
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConnectorSourceTypeInfo, Integer, Hash)>] ListConnectorSourceTypeInfo data, response status code and response headers
    def list_connection_source_types_connections_source_type_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.list_connection_source_types_connections_source_type_get ...'
      end
      # resource path
      local_var_path = '/connections/source-type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConnectorSourceTypeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.list_connection_source_types_connections_source_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#list_connection_source_types_connections_source_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Connections
    # List all connections sorted by created_at in descending order. Results are paginated with a max limit of 100. When more documents are available, a `cursor` will be provided. Use the `cursor` parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples.
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition.
    # @return [ConnectionList]
    def list_connections_connections_get(opts = {})
      data, _status_code, _headers = list_connections_connections_get_with_http_info(opts)
      data
    end

    # List Connections
    # List all connections sorted by created_at in descending order. Results are paginated with a max limit of 100. When more documents are available, a &#x60;cursor&#x60; will be provided. Use the &#x60;cursor&#x60; parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples.
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition.
    # @return [Array<(ConnectionList, Integer, Hash)>] ConnectionList data, response status code and response headers
    def list_connections_connections_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.list_connections_connections_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectionsApi.list_connections_connections_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectionsApi.list_connections_connections_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/connections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.list_connections_connections_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#list_connections_connections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Connection Enabled
    # Enable or disable the connection. A disabled connection won't sync.
    # @param connection_id [String] 
    # @param set_connection_enabled_payload [SetConnectionEnabledPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def set_connection_enabled_connections_connection_id_enabled_put(connection_id, set_connection_enabled_payload, opts = {})
      data, _status_code, _headers = set_connection_enabled_connections_connection_id_enabled_put_with_http_info(connection_id, set_connection_enabled_payload, opts)
      data
    end

    # Set Connection Enabled
    # Enable or disable the connection. A disabled connection won&#39;t sync.
    # @param connection_id [String] 
    # @param set_connection_enabled_payload [SetConnectionEnabledPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def set_connection_enabled_connections_connection_id_enabled_put_with_http_info(connection_id, set_connection_enabled_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.set_connection_enabled_connections_connection_id_enabled_put ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.set_connection_enabled_connections_connection_id_enabled_put"
      end
      # verify the required parameter 'set_connection_enabled_payload' is set
      if @api_client.config.client_side_validation && set_connection_enabled_payload.nil?
        fail ArgumentError, "Missing the required parameter 'set_connection_enabled_payload' when calling ConnectionsApi.set_connection_enabled_connections_connection_id_enabled_put"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/enabled'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_connection_enabled_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.set_connection_enabled_connections_connection_id_enabled_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#set_connection_enabled_connections_connection_id_enabled_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Connection Limits
    # Sets limits on a connection. Limits can be set on the total number of pages a connection can sync. When the limit is reached, the connection will be disabled. Limit may be removed by setting it to `null`.
    # @param connection_id [String] 
    # @param connection_limit_params [ConnectionLimitParams] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def set_connection_limits_connections_connection_id_limit_put(connection_id, connection_limit_params, opts = {})
      data, _status_code, _headers = set_connection_limits_connections_connection_id_limit_put_with_http_info(connection_id, connection_limit_params, opts)
      data
    end

    # Set Connection Limits
    # Sets limits on a connection. Limits can be set on the total number of pages a connection can sync. When the limit is reached, the connection will be disabled. Limit may be removed by setting it to &#x60;null&#x60;.
    # @param connection_id [String] 
    # @param connection_limit_params [ConnectionLimitParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def set_connection_limits_connections_connection_id_limit_put_with_http_info(connection_id, connection_limit_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.set_connection_limits_connections_connection_id_limit_put ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.set_connection_limits_connections_connection_id_limit_put"
      end
      # verify the required parameter 'connection_limit_params' is set
      if @api_client.config.client_side_validation && connection_limit_params.nil?
        fail ArgumentError, "Missing the required parameter 'connection_limit_params' when calling ConnectionsApi.set_connection_limits_connections_connection_id_limit_put"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/limit'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection_limit_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.set_connection_limits_connections_connection_id_limit_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#set_connection_limits_connections_connection_id_limit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync Connection
    # Schedules a connector to sync as soon as possible.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseOK]
    def sync_connection(connection_id, opts = {})
      data, _status_code, _headers = sync_connection_with_http_info(connection_id, opts)
      data
    end

    # Sync Connection
    # Schedules a connector to sync as soon as possible.
    # @param connection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseOK, Integer, Hash)>] ResponseOK data, response status code and response headers
    def sync_connection_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.sync_connection ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.sync_connection"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/sync'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseOK'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.sync_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#sync_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Connection
    # Updates a connections metadata or mode. These changes will be seen after the next sync.
    # @param connection_id [String] 
    # @param connection_base [ConnectionBase] 
    # @param [Hash] opts the optional parameters
    # @return [Connection]
    def update_connection_connections_connection_id_put(connection_id, connection_base, opts = {})
      data, _status_code, _headers = update_connection_connections_connection_id_put_with_http_info(connection_id, connection_base, opts)
      data
    end

    # Update Connection
    # Updates a connections metadata or mode. These changes will be seen after the next sync.
    # @param connection_id [String] 
    # @param connection_base [ConnectionBase] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def update_connection_connections_connection_id_put_with_http_info(connection_id, connection_base, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.update_connection_connections_connection_id_put ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.update_connection_connections_connection_id_put"
      end
      # verify the required parameter 'connection_base' is set
      if @api_client.config.client_side_validation && connection_base.nil?
        fail ArgumentError, "Missing the required parameter 'connection_base' when calling ConnectionsApi.update_connection_connections_connection_id_put"
      end
      # resource path
      local_var_path = '/connections/{connection_id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection_base)

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.update_connection_connections_connection_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#update_connection_connections_connection_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
