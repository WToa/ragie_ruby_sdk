=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class PartitionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Partition
    # Create a new partition. Partitions are used to scope documents, connections, and instructions. Partitions must be lowercase alphanumeric and may only include the special characters `_` and `-`. A partition may also be created by creating a document in it. Limits for a partition may optionally be defined when creating.
    # @param create_partition_params [CreatePartitionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Partition]
    def create_partition_partitions_post(create_partition_params, opts = {})
      data, _status_code, _headers = create_partition_partitions_post_with_http_info(create_partition_params, opts)
      data
    end

    # Create Partition
    # Create a new partition. Partitions are used to scope documents, connections, and instructions. Partitions must be lowercase alphanumeric and may only include the special characters &#x60;_&#x60; and &#x60;-&#x60;. A partition may also be created by creating a document in it. Limits for a partition may optionally be defined when creating.
    # @param create_partition_params [CreatePartitionParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Partition, Integer, Hash)>] Partition data, response status code and response headers
    def create_partition_partitions_post_with_http_info(create_partition_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.create_partition_partitions_post ...'
      end
      # verify the required parameter 'create_partition_params' is set
      if @api_client.config.client_side_validation && create_partition_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_partition_params' when calling PartitionsApi.create_partition_partitions_post"
      end
      # resource path
      local_var_path = '/partitions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_partition_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Partition'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.create_partition_partitions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#create_partition_partitions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Partition
    # Deletes a partition and all of its associated data. This includes connections, documents, and partition specific instructions. This operation is irreversible.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def delete_partition_partitions_partition_id_delete(partition_id, opts = {})
      data, _status_code, _headers = delete_partition_partitions_partition_id_delete_with_http_info(partition_id, opts)
      data
    end

    # Delete Partition
    # Deletes a partition and all of its associated data. This includes connections, documents, and partition specific instructions. This operation is irreversible.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def delete_partition_partitions_partition_id_delete_with_http_info(partition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.delete_partition_partitions_partition_id_delete ...'
      end
      # verify the required parameter 'partition_id' is set
      if @api_client.config.client_side_validation && partition_id.nil?
        fail ArgumentError, "Missing the required parameter 'partition_id' when calling PartitionsApi.delete_partition_partitions_partition_id_delete"
      end
      # resource path
      local_var_path = '/partitions/{partition_id}'.sub('{' + 'partition_id' + '}', CGI.escape(partition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.delete_partition_partitions_partition_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#delete_partition_partitions_partition_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Mcp
    # Disables context-aware descriptions for a partition. This will stop automatically generating descriptions for the partition.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def disable_mcp_partitions_partition_id_mcp_delete(partition_id, opts = {})
      data, _status_code, _headers = disable_mcp_partitions_partition_id_mcp_delete_with_http_info(partition_id, opts)
      data
    end

    # Disable Mcp
    # Disables context-aware descriptions for a partition. This will stop automatically generating descriptions for the partition.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def disable_mcp_partitions_partition_id_mcp_delete_with_http_info(partition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.disable_mcp_partitions_partition_id_mcp_delete ...'
      end
      # verify the required parameter 'partition_id' is set
      if @api_client.config.client_side_validation && partition_id.nil?
        fail ArgumentError, "Missing the required parameter 'partition_id' when calling PartitionsApi.disable_mcp_partitions_partition_id_mcp_delete"
      end
      # resource path
      local_var_path = '/partitions/{partition_id}/mcp'.sub('{' + 'partition_id' + '}', CGI.escape(partition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.disable_mcp_partitions_partition_id_mcp_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#disable_mcp_partitions_partition_id_mcp_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Mcp
    # Enables context-aware descriptions for a partition. This will allow the automatically generate a desccription for based on the documents in the partition.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def enable_mcp_partitions_partition_id_mcp_post(partition_id, opts = {})
      data, _status_code, _headers = enable_mcp_partitions_partition_id_mcp_post_with_http_info(partition_id, opts)
      data
    end

    # Enable Mcp
    # Enables context-aware descriptions for a partition. This will allow the automatically generate a desccription for based on the documents in the partition.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def enable_mcp_partitions_partition_id_mcp_post_with_http_info(partition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.enable_mcp_partitions_partition_id_mcp_post ...'
      end
      # verify the required parameter 'partition_id' is set
      if @api_client.config.client_side_validation && partition_id.nil?
        fail ArgumentError, "Missing the required parameter 'partition_id' when calling PartitionsApi.enable_mcp_partitions_partition_id_mcp_post"
      end
      # resource path
      local_var_path = '/partitions/{partition_id}/mcp'.sub('{' + 'partition_id' + '}', CGI.escape(partition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.enable_mcp_partitions_partition_id_mcp_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#enable_mcp_partitions_partition_id_mcp_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Partition
    # Get a partition by its ID. Includes usage information such as the number of documents and pages hosted and processed. The partition's limits are also included.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PartitionDetail]
    def get_partition_partitions_partition_id_get(partition_id, opts = {})
      data, _status_code, _headers = get_partition_partitions_partition_id_get_with_http_info(partition_id, opts)
      data
    end

    # Get Partition
    # Get a partition by its ID. Includes usage information such as the number of documents and pages hosted and processed. The partition&#39;s limits are also included.
    # @param partition_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PartitionDetail, Integer, Hash)>] PartitionDetail data, response status code and response headers
    def get_partition_partitions_partition_id_get_with_http_info(partition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.get_partition_partitions_partition_id_get ...'
      end
      # verify the required parameter 'partition_id' is set
      if @api_client.config.client_side_validation && partition_id.nil?
        fail ArgumentError, "Missing the required parameter 'partition_id' when calling PartitionsApi.get_partition_partitions_partition_id_get"
      end
      # resource path
      local_var_path = '/partitions/{partition_id}'.sub('{' + 'partition_id' + '}', CGI.escape(partition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PartitionDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.get_partition_partitions_partition_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#get_partition_partitions_partition_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Partitions
    # List all partitions sorted by name in ascending order. Results are paginated with a max limit of 100. When more partitions are available, a `cursor` will be provided. Use the `cursor` parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @return [PartitionList]
    def list_partitions_partitions_get(opts = {})
      data, _status_code, _headers = list_partitions_partitions_get_with_http_info(opts)
      data
    end

    # List Partitions
    # List all partitions sorted by name in ascending order. Results are paginated with a max limit of 100. When more partitions are available, a &#x60;cursor&#x60; will be provided. Use the &#x60;cursor&#x60; parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @return [Array<(PartitionList, Integer, Hash)>] PartitionList data, response status code and response headers
    def list_partitions_partitions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.list_partitions_partitions_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PartitionsApi.list_partitions_partitions_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PartitionsApi.list_partitions_partitions_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/partitions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PartitionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.list_partitions_partitions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#list_partitions_partitions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Partition Limits
    # Sets limits on a partition. Limits can be set on the total number of pages a partition can host and process. When the limit is reached, the partition will be disabled. A limit may be removed by setting it to `null`.
    # @param partition_id [String] 
    # @param partition_limit_params [PartitionLimitParams] 
    # @param [Hash] opts the optional parameters
    # @return [PartitionDetail]
    def set_partition_limits_partitions_partition_id_limits_put(partition_id, partition_limit_params, opts = {})
      data, _status_code, _headers = set_partition_limits_partitions_partition_id_limits_put_with_http_info(partition_id, partition_limit_params, opts)
      data
    end

    # Set Partition Limits
    # Sets limits on a partition. Limits can be set on the total number of pages a partition can host and process. When the limit is reached, the partition will be disabled. A limit may be removed by setting it to &#x60;null&#x60;.
    # @param partition_id [String] 
    # @param partition_limit_params [PartitionLimitParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PartitionDetail, Integer, Hash)>] PartitionDetail data, response status code and response headers
    def set_partition_limits_partitions_partition_id_limits_put_with_http_info(partition_id, partition_limit_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PartitionsApi.set_partition_limits_partitions_partition_id_limits_put ...'
      end
      # verify the required parameter 'partition_id' is set
      if @api_client.config.client_side_validation && partition_id.nil?
        fail ArgumentError, "Missing the required parameter 'partition_id' when calling PartitionsApi.set_partition_limits_partitions_partition_id_limits_put"
      end
      # verify the required parameter 'partition_limit_params' is set
      if @api_client.config.client_side_validation && partition_limit_params.nil?
        fail ArgumentError, "Missing the required parameter 'partition_limit_params' when calling PartitionsApi.set_partition_limits_partitions_partition_id_limits_put"
      end
      # resource path
      local_var_path = '/partitions/{partition_id}/limits'.sub('{' + 'partition_id' + '}', CGI.escape(partition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(partition_limit_params)

      # return_type
      return_type = opts[:debug_return_type] || 'PartitionDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"PartitionsApi.set_partition_limits_partitions_partition_id_limits_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PartitionsApi#set_partition_limits_partitions_partition_id_limits_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
