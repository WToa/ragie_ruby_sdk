=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class ResponsesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Response
    # Create a response. This will generate an LLM or agentic response. At this time the only supported model is `deep-search`. Responses may be streamed or returned synchronously. The `retrieve` tool is currently the only supported tool, more tools will be added in the future. A single partition may be provided in the retrieve tool. If omitted the `default` partition is used.
    # @param request [Request] 
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def create_response_responses_post(request, opts = {})
      data, _status_code, _headers = create_response_responses_post_with_http_info(request, opts)
      data
    end

    # Create Response
    # Create a response. This will generate an LLM or agentic response. At this time the only supported model is &#x60;deep-search&#x60;. Responses may be streamed or returned synchronously. The &#x60;retrieve&#x60; tool is currently the only supported tool, more tools will be added in the future. A single partition may be provided in the retrieve tool. If omitted the &#x60;default&#x60; partition is used.
    # @param request [Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def create_response_responses_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponsesApi.create_response_responses_post ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling ResponsesApi.create_response_responses_post"
      end
      # resource path
      local_var_path = '/responses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ResponsesApi.create_response_responses_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponsesApi#create_response_responses_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Response
    # Get a response by its ID. This will return the response and its status. If the response is still in progress, the status will be `in_progress`. If the response is completed, the status will be `completed`. If the response is failed, the status will be `failed`.
    # @param response_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def get_response_responses_response_id_get(response_id, opts = {})
      data, _status_code, _headers = get_response_responses_response_id_get_with_http_info(response_id, opts)
      data
    end

    # Get Response
    # Get a response by its ID. This will return the response and its status. If the response is still in progress, the status will be &#x60;in_progress&#x60;. If the response is completed, the status will be &#x60;completed&#x60;. If the response is failed, the status will be &#x60;failed&#x60;.
    # @param response_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def get_response_responses_response_id_get_with_http_info(response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResponsesApi.get_response_responses_response_id_get ...'
      end
      # verify the required parameter 'response_id' is set
      if @api_client.config.client_side_validation && response_id.nil?
        fail ArgumentError, "Missing the required parameter 'response_id' when calling ResponsesApi.get_response_responses_response_id_get"
      end
      # resource path
      local_var_path = '/responses/{response_id}'.sub('{' + 'response_id' + '}', CGI.escape(response_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"ResponsesApi.get_response_responses_response_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResponsesApi#get_response_responses_response_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
