=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'cgi'

module RagieRubySdk
  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Document
    # On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [`pending`, `partitioning`, `partitioned`, `refined`, `chunked`, `indexed`, `summary_indexed`, `keyword_indexed`, `ready`, `failed`]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in `indexed` state. However the summary will only be available once the state has changed to `summary_indexed` or `ready`.
    # @param file [File] The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: &#x60;.eml&#x60; &#x60;.html&#x60; &#x60;.json&#x60; &#x60;.md&#x60; &#x60;.msg&#x60; &#x60;.rst&#x60; &#x60;.rtf&#x60; &#x60;.txt&#x60; &#x60;.xml&#x60; Images: &#x60;.png&#x60; &#x60;.webp&#x60; &#x60;.jpg&#x60; &#x60;.jpeg&#x60; &#x60;.tiff&#x60; &#x60;.bmp&#x60; &#x60;.heic&#x60; Documents: &#x60;.csv&#x60; &#x60;.doc&#x60; &#x60;.docx&#x60; &#x60;.epub&#x60; &#x60;.epub+zip&#x60; &#x60;.odt&#x60; &#x60;.pdf&#x60; &#x60;.ppt&#x60; &#x60;.pptx&#x60; &#x60;.tsv&#x60; &#x60;.xlsx&#x60; &#x60;.xls&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param [Hash] opts the optional parameters
    # @option opts [Mode2] :mode 
    # @option opts [Hash<String, MetadataValue1>] :metadata Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: &#x60;document_id&#x60;, &#x60;document_type&#x60;, &#x60;document_source&#x60;, &#x60;document_name&#x60;, &#x60;document_uploaded_at&#x60;, &#x60;start_time&#x60;, &#x60;end_time&#x60;.
    # @option opts [String] :external_id An optional identifier for the document. A common value might be an id in an external system or the URL where the source file may be found.
    # @option opts [String] :name An optional name for the document. If set, the document will have this name. Otherwise it will default to the file&#39;s name.
    # @option opts [String] :partition An optional partition identifier. Documents can be scoped to a partition. Partitions must be lowercase alphanumeric and may only include the special characters &#x60;_&#x60; and &#x60;-&#x60;.  A partition is created any time a document is created.
    # @return [Document]
    def create_document(file, opts = {})
      data, _status_code, _headers = create_document_with_http_info(file, opts)
      data
    end

    # Create Document
    # On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [&#x60;pending&#x60;, &#x60;partitioning&#x60;, &#x60;partitioned&#x60;, &#x60;refined&#x60;, &#x60;chunked&#x60;, &#x60;indexed&#x60;, &#x60;summary_indexed&#x60;, &#x60;keyword_indexed&#x60;, &#x60;ready&#x60;, &#x60;failed&#x60;]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in &#x60;indexed&#x60; state. However the summary will only be available once the state has changed to &#x60;summary_indexed&#x60; or &#x60;ready&#x60;.
    # @param file [File] The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: &#x60;.eml&#x60; &#x60;.html&#x60; &#x60;.json&#x60; &#x60;.md&#x60; &#x60;.msg&#x60; &#x60;.rst&#x60; &#x60;.rtf&#x60; &#x60;.txt&#x60; &#x60;.xml&#x60; Images: &#x60;.png&#x60; &#x60;.webp&#x60; &#x60;.jpg&#x60; &#x60;.jpeg&#x60; &#x60;.tiff&#x60; &#x60;.bmp&#x60; &#x60;.heic&#x60; Documents: &#x60;.csv&#x60; &#x60;.doc&#x60; &#x60;.docx&#x60; &#x60;.epub&#x60; &#x60;.epub+zip&#x60; &#x60;.odt&#x60; &#x60;.pdf&#x60; &#x60;.ppt&#x60; &#x60;.pptx&#x60; &#x60;.tsv&#x60; &#x60;.xlsx&#x60; &#x60;.xls&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param [Hash] opts the optional parameters
    # @option opts [Mode2] :mode 
    # @option opts [Hash<String, MetadataValue1>] :metadata Metadata for the document. Keys must be strings. Values may be strings, numbers, booleans, or lists of strings. Numbers may be integers or floating point and will be converted to 64 bit floating point. 1000 total values are allowed. Each item in an array counts towards the total. The following keys are reserved for internal use: &#x60;document_id&#x60;, &#x60;document_type&#x60;, &#x60;document_source&#x60;, &#x60;document_name&#x60;, &#x60;document_uploaded_at&#x60;, &#x60;start_time&#x60;, &#x60;end_time&#x60;.
    # @option opts [String] :external_id An optional identifier for the document. A common value might be an id in an external system or the URL where the source file may be found.
    # @option opts [String] :name An optional name for the document. If set, the document will have this name. Otherwise it will default to the file&#39;s name.
    # @option opts [String] :partition An optional partition identifier. Documents can be scoped to a partition. Partitions must be lowercase alphanumeric and may only include the special characters &#x60;_&#x60; and &#x60;-&#x60;.  A partition is created any time a document is created.
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def create_document_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.create_document ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentsApi.create_document"
      end
      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      form_params['metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.create_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Document From Url
    # Ingest a document from a publicly accessible URL. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [`pending`, `partitioning`, `partitioned`, `refined`, `chunked`, `indexed`, `summary_indexed`, `keyword_indexed`, `ready`, `failed`]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in `indexed` state. However the summary will only be available once the state has changed to `summary_indexed` or `ready`. PDF files over 2000 pages are not supported in hi_res mode.
    # @param create_document_from_url_params [CreateDocumentFromUrlParams] 
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def create_document_from_url(create_document_from_url_params, opts = {})
      data, _status_code, _headers = create_document_from_url_with_http_info(create_document_from_url_params, opts)
      data
    end

    # Create Document From Url
    # Ingest a document from a publicly accessible URL. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [&#x60;pending&#x60;, &#x60;partitioning&#x60;, &#x60;partitioned&#x60;, &#x60;refined&#x60;, &#x60;chunked&#x60;, &#x60;indexed&#x60;, &#x60;summary_indexed&#x60;, &#x60;keyword_indexed&#x60;, &#x60;ready&#x60;, &#x60;failed&#x60;]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in &#x60;indexed&#x60; state. However the summary will only be available once the state has changed to &#x60;summary_indexed&#x60; or &#x60;ready&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param create_document_from_url_params [CreateDocumentFromUrlParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def create_document_from_url_with_http_info(create_document_from_url_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.create_document_from_url ...'
      end
      # verify the required parameter 'create_document_from_url_params' is set
      if @api_client.config.client_side_validation && create_document_from_url_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_document_from_url_params' when calling DocumentsApi.create_document_from_url"
      end
      # resource path
      local_var_path = '/documents/url'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_document_from_url_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.create_document_from_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document_from_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Document Raw
    # Ingest a document as raw text. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [`pending`, `partitioning`, `partitioned`, `refined`, `chunked`, `indexed`, `summary_indexed`, `keyword_indexed`, `ready`, `failed`]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in `indexed` state. However the summary will only be available once the state has changed to `summary_indexed` or `ready`.
    # @param create_document_raw_params [CreateDocumentRawParams] 
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def create_document_raw(create_document_raw_params, opts = {})
      data, _status_code, _headers = create_document_raw_with_http_info(create_document_raw_params, opts)
      data
    end

    # Create Document Raw
    # Ingest a document as raw text. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [&#x60;pending&#x60;, &#x60;partitioning&#x60;, &#x60;partitioned&#x60;, &#x60;refined&#x60;, &#x60;chunked&#x60;, &#x60;indexed&#x60;, &#x60;summary_indexed&#x60;, &#x60;keyword_indexed&#x60;, &#x60;ready&#x60;, &#x60;failed&#x60;]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in &#x60;indexed&#x60; state. However the summary will only be available once the state has changed to &#x60;summary_indexed&#x60; or &#x60;ready&#x60;.
    # @param create_document_raw_params [CreateDocumentRawParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def create_document_raw_with_http_info(create_document_raw_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.create_document_raw ...'
      end
      # verify the required parameter 'create_document_raw_params' is set
      if @api_client.config.client_side_validation && create_document_raw_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_document_raw_params' when calling DocumentsApi.create_document_raw"
      end
      # resource path
      local_var_path = '/documents/raw'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_document_raw_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.create_document_raw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Document
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async If true, performs document deletion asynchronously
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentDelete]
    def delete_document(document_id, opts = {})
      data, _status_code, _headers = delete_document_with_http_info(document_id, opts)
      data
    end

    # Delete Document
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async If true, performs document deletion asynchronously
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentDelete, Integer, Hash)>] DocumentDelete data, response status code and response headers
    def delete_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.delete_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.delete_document"
      end
      # resource path
      local_var_path = '/documents/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'async'] = opts[:'async'] if !opts[:'async'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentDelete'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.delete_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentGet]
    def get_document(document_id, opts = {})
      data, _status_code, _headers = get_document_with_http_info(document_id, opts)
      data
    end

    # Get Document
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentGet, Integer, Hash)>] DocumentGet data, response status code and response headers
    def get_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document"
      end
      # resource path
      local_var_path = '/documents/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Chunk
    # Gets a document chunk by its document and chunk ID.
    # @param document_id [String] The id of the document.
    # @param chunk_id [String] The ID of the chunk.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentChunkDetail]
    def get_document_chunk(document_id, chunk_id, opts = {})
      data, _status_code, _headers = get_document_chunk_with_http_info(document_id, chunk_id, opts)
      data
    end

    # Get Document Chunk
    # Gets a document chunk by its document and chunk ID.
    # @param document_id [String] The id of the document.
    # @param chunk_id [String] The ID of the chunk.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentChunkDetail, Integer, Hash)>] DocumentChunkDetail data, response status code and response headers
    def get_document_chunk_with_http_info(document_id, chunk_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_chunk ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_chunk"
      end
      # verify the required parameter 'chunk_id' is set
      if @api_client.config.client_side_validation && chunk_id.nil?
        fail ArgumentError, "Missing the required parameter 'chunk_id' when calling DocumentsApi.get_document_chunk"
      end
      # resource path
      local_var_path = '/documents/{document_id}/chunks/{chunk_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s)).sub('{' + 'chunk_id' + '}', CGI.escape(chunk_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentChunkDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_chunk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_chunk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Chunk Content
    # Returns the content of a document chunk in the requested format. Can be used to stream media of the content for audio/video documents.
    # @param document_id [String] The id of the document.
    # @param chunk_id [String] The ID of the chunk.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_type The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the chunk&#39;s document type.
    # @option opts [Boolean] :download Whether to return the content as a file download or a raw stream. If set to &#x60;true&#x60;, the content will be returned as a named file for download. (default to false)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [String] :range 
    # @return [Object]
    def get_document_chunk_content(document_id, chunk_id, opts = {})
      data, _status_code, _headers = get_document_chunk_content_with_http_info(document_id, chunk_id, opts)
      data
    end

    # Get Document Chunk Content
    # Returns the content of a document chunk in the requested format. Can be used to stream media of the content for audio/video documents.
    # @param document_id [String] The id of the document.
    # @param chunk_id [String] The ID of the chunk.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_type The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the chunk&#39;s document type.
    # @option opts [Boolean] :download Whether to return the content as a file download or a raw stream. If set to &#x60;true&#x60;, the content will be returned as a named file for download. (default to false)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [String] :range 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_document_chunk_content_with_http_info(document_id, chunk_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_chunk_content ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_chunk_content"
      end
      # verify the required parameter 'chunk_id' is set
      if @api_client.config.client_side_validation && chunk_id.nil?
        fail ArgumentError, "Missing the required parameter 'chunk_id' when calling DocumentsApi.get_document_chunk_content"
      end
      allowable_values = ["text/plain", "audio/mpeg", "video/mp4", "image/webp", "image/heic", "image/bmp", "image/png", "image/jpeg", "image/tiff"]
      if @api_client.config.client_side_validation && opts[:'media_type'] && !allowable_values.include?(opts[:'media_type'])
        fail ArgumentError, "invalid value for \"media_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/documents/{document_id}/chunks/{chunk_id}/content'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s)).sub('{' + 'chunk_id' + '}', CGI.escape(chunk_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'media_type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'download'] = opts[:'download'] if !opts[:'download'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream', 'audio/mpeg', 'text/plain']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?
      header_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_chunk_content",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_chunk_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Chunks
    # List all document chunks sorted by index in ascending order. May be limited to a range of chunk indices with the `start_index` and `end_index` parameters. Documents created prior to 9/18/2024, which have not been updated since, have chunks which do not include an index and their index will be returned as -1. They will be sorted by their ID instead. Updating the document using the `Update Document File` or `Update Document Raw` endpoint will regenerate document chunks, including their index. Results are paginated with a max limit of 100. When more chunks are available, a `cursor` will be provided. Use the `cursor` parameter to retrieve the subsequent page.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index The inclusive starting index of the chunk range to list. If omitted and &#x60;end_index&#x60; is present effectively limits results to at most one chunk matching &#x60;end_index&#x60;. If both &#x60;start_index&#x60; and &#x60;end_index&#x60; are omitted, results are not limited by index.
    # @option opts [Integer] :end_index The inclusive ending index of the chunk range to list. If omitted and &#x60;start_index&#x60; is present effectively limits results to at most one chunk matching &#x60;start_index&#x60;. If both &#x60;start_index&#x60; and &#x60;end_index&#x60; are omitted, results are not limited by index.
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentChunkList]
    def get_document_chunks(document_id, opts = {})
      data, _status_code, _headers = get_document_chunks_with_http_info(document_id, opts)
      data
    end

    # Get Document Chunks
    # List all document chunks sorted by index in ascending order. May be limited to a range of chunk indices with the &#x60;start_index&#x60; and &#x60;end_index&#x60; parameters. Documents created prior to 9/18/2024, which have not been updated since, have chunks which do not include an index and their index will be returned as -1. They will be sorted by their ID instead. Updating the document using the &#x60;Update Document File&#x60; or &#x60;Update Document Raw&#x60; endpoint will regenerate document chunks, including their index. Results are paginated with a max limit of 100. When more chunks are available, a &#x60;cursor&#x60; will be provided. Use the &#x60;cursor&#x60; parameter to retrieve the subsequent page.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index The inclusive starting index of the chunk range to list. If omitted and &#x60;end_index&#x60; is present effectively limits results to at most one chunk matching &#x60;end_index&#x60;. If both &#x60;start_index&#x60; and &#x60;end_index&#x60; are omitted, results are not limited by index.
    # @option opts [Integer] :end_index The inclusive ending index of the chunk range to list. If omitted and &#x60;start_index&#x60; is present effectively limits results to at most one chunk matching &#x60;start_index&#x60;. If both &#x60;start_index&#x60; and &#x60;end_index&#x60; are omitted, results are not limited by index.
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentChunkList, Integer, Hash)>] DocumentChunkList data, response status code and response headers
    def get_document_chunks_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_chunks ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_chunks"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DocumentsApi.get_document_chunks, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DocumentsApi.get_document_chunks, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/documents/{document_id}/chunks'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'end_index'] = opts[:'end_index'] if !opts[:'end_index'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentChunkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_chunks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_chunks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Content
    # Get the content of a document. The `media_type` parameter can be used to request the content in a different format. When requesting as `application/json` additional metadata about the document will be included. If the original document contained content such as images or other non-textual media, this response will include a text description of that media instead of the original file data. Using mime types such as `audio/mpeg` or `video/mp4` will stream the file in a format that can be provided to an audio video player.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_type The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the document&#39;s type.
    # @option opts [Boolean] :download Whether to return the content as a file download or a raw stream. If set to &#x60;true&#x60;, the content will be returned as a named file for download. (default to false)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [String] :range 
    # @return [DocumentWithContent]
    def get_document_content(document_id, opts = {})
      data, _status_code, _headers = get_document_content_with_http_info(document_id, opts)
      data
    end

    # Get Document Content
    # Get the content of a document. The &#x60;media_type&#x60; parameter can be used to request the content in a different format. When requesting as &#x60;application/json&#x60; additional metadata about the document will be included. If the original document contained content such as images or other non-textual media, this response will include a text description of that media instead of the original file data. Using mime types such as &#x60;audio/mpeg&#x60; or &#x60;video/mp4&#x60; will stream the file in a format that can be provided to an audio video player.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media_type The desired media type of the content to return described as a mime type. An error will be returned if the requested media type is not supported for the document&#39;s type.
    # @option opts [Boolean] :download Whether to return the content as a file download or a raw stream. If set to &#x60;true&#x60;, the content will be returned as a named file for download. (default to false)
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [String] :range 
    # @return [Array<(DocumentWithContent, Integer, Hash)>] DocumentWithContent data, response status code and response headers
    def get_document_content_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_content ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_content"
      end
      allowable_values = ["text/plain", "audio/mpeg", "video/mp4", "image/webp", "image/heic", "image/bmp", "image/png", "image/jpeg", "image/tiff", "application/json"]
      if @api_client.config.client_side_validation && opts[:'media_type'] && !allowable_values.include?(opts[:'media_type'])
        fail ArgumentError, "invalid value for \"media_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/documents/{document_id}/content'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'media_type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'download'] = opts[:'download'] if !opts[:'download'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?
      header_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_content",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Source
    # Get the source file of a document. The source file is the original file that was uploaded to create the document. If the document was created from a URL, the source file will be the content of the URL. If the document was created by a connection, the source file will vary based on the type of the connection. For example, a Google Drive connection will return the file that was synced from the Google Drive, while a SalesForce connection would return a JSON file of the data synced from SalesForce.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [File]
    def get_document_source(document_id, opts = {})
      data, _status_code, _headers = get_document_source_with_http_info(document_id, opts)
      data
    end

    # Get Document Source
    # Get the source file of a document. The source file is the original file that was uploaded to create the document. If the document was created from a URL, the source file will be the content of the URL. If the document was created by a connection, the source file will vary based on the type of the connection. For example, a Google Drive connection will return the file that was synced from the Google Drive, while a SalesForce connection would return a JSON file of the data synced from SalesForce.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_document_source_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_source ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_source"
      end
      # resource path
      local_var_path = '/documents/{document_id}/source'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Document Summary
    # Get a LLM generated summary of the document. The summary is created when the document is first created or updated. Documents of types ['xls', 'xlsx', 'csv', 'json'] are not supported for summarization. Documents greater than 1M in token length are not supported. This feature is in beta and may change in the future.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentSummary]
    def get_document_summary(document_id, opts = {})
      data, _status_code, _headers = get_document_summary_with_http_info(document_id, opts)
      data
    end

    # Get Document Summary
    # Get a LLM generated summary of the document. The summary is created when the document is first created or updated. Documents of types [&#39;xls&#39;, &#39;xlsx&#39;, &#39;csv&#39;, &#39;json&#39;] are not supported for summarization. Documents greater than 1M in token length are not supported. This feature is in beta and may change in the future.
    # @param document_id [String] The id of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentSummary, Integer, Hash)>] DocumentSummary data, response status code and response headers
    def get_document_summary_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_summary ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_summary"
      end
      # resource path
      local_var_path = '/documents/{document_id}/summary'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Documents
    # List all documents sorted by created_at in descending order. Results are paginated with a max limit of 100. When more documents are available, a `cursor` will be provided. Use the `cursor` parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples.
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentList]
    def list_documents(opts = {})
      data, _status_code, _headers = list_documents_with_http_info(opts)
      data
    end

    # List Documents
    # List all documents sorted by created_at in descending order. Results are paginated with a max limit of 100. When more documents are available, a &#x60;cursor&#x60; will be provided. Use the &#x60;cursor&#x60; parameter to retrieve the subsequent page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor An opaque cursor for pagination
    # @option opts [Integer] :page_size The number of items per page (must be greater than 0 and less than or equal to 100) (default to 10)
    # @option opts [String] :filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples.
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentList, Integer, Hash)>] DocumentList data, response status code and response headers
    def list_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.list_documents ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DocumentsApi.list_documents, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DocumentsApi.list_documents, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.list_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#list_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch Document Metadata
    # @param document_id [String] The id of the document.
    # @param patch_document_metadata_params [PatchDocumentMetadataParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [ResponsePatchdocumentmetadata]
    def patch_document_metadata(document_id, patch_document_metadata_params, opts = {})
      data, _status_code, _headers = patch_document_metadata_with_http_info(document_id, patch_document_metadata_params, opts)
      data
    end

    # Patch Document Metadata
    # @param document_id [String] The id of the document.
    # @param patch_document_metadata_params [PatchDocumentMetadataParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(ResponsePatchdocumentmetadata, Integer, Hash)>] ResponsePatchdocumentmetadata data, response status code and response headers
    def patch_document_metadata_with_http_info(document_id, patch_document_metadata_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.patch_document_metadata ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.patch_document_metadata"
      end
      # verify the required parameter 'patch_document_metadata_params' is set
      if @api_client.config.client_side_validation && patch_document_metadata_params.nil?
        fail ArgumentError, "Missing the required parameter 'patch_document_metadata_params' when calling DocumentsApi.patch_document_metadata"
      end
      # resource path
      local_var_path = '/documents/{document_id}/metadata'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_document_metadata_params)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsePatchdocumentmetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.patch_document_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#patch_document_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Document File
    # @param document_id [String] The id of the document.
    # @param file [File] The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: &#x60;.eml&#x60; &#x60;.html&#x60; &#x60;.json&#x60; &#x60;.md&#x60; &#x60;.msg&#x60; &#x60;.rst&#x60; &#x60;.rtf&#x60; &#x60;.txt&#x60; &#x60;.xml&#x60; Images: &#x60;.png&#x60; &#x60;.webp&#x60; &#x60;.jpg&#x60; &#x60;.jpeg&#x60; &#x60;.tiff&#x60; &#x60;.bmp&#x60; &#x60;.heic&#x60; Documents: &#x60;.csv&#x60; &#x60;.doc&#x60; &#x60;.docx&#x60; &#x60;.epub&#x60; &#x60;.epub+zip&#x60; &#x60;.odt&#x60; &#x60;.pdf&#x60; &#x60;.ppt&#x60; &#x60;.pptx&#x60; &#x60;.tsv&#x60; &#x60;.xlsx&#x60; &#x60;.xls&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [Mode2] :mode 
    # @return [DocumentFileUpdate]
    def update_document_file(document_id, file, opts = {})
      data, _status_code, _headers = update_document_file_with_http_info(document_id, file, opts)
      data
    end

    # Update Document File
    # @param document_id [String] The id of the document.
    # @param file [File] The binary file to upload, extract, and index for retrieval. The following file types are supported: Plain Text: &#x60;.eml&#x60; &#x60;.html&#x60; &#x60;.json&#x60; &#x60;.md&#x60; &#x60;.msg&#x60; &#x60;.rst&#x60; &#x60;.rtf&#x60; &#x60;.txt&#x60; &#x60;.xml&#x60; Images: &#x60;.png&#x60; &#x60;.webp&#x60; &#x60;.jpg&#x60; &#x60;.jpeg&#x60; &#x60;.tiff&#x60; &#x60;.bmp&#x60; &#x60;.heic&#x60; Documents: &#x60;.csv&#x60; &#x60;.doc&#x60; &#x60;.docx&#x60; &#x60;.epub&#x60; &#x60;.epub+zip&#x60; &#x60;.odt&#x60; &#x60;.pdf&#x60; &#x60;.ppt&#x60; &#x60;.pptx&#x60; &#x60;.tsv&#x60; &#x60;.xlsx&#x60; &#x60;.xls&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @option opts [Mode2] :mode 
    # @return [Array<(DocumentFileUpdate, Integer, Hash)>] DocumentFileUpdate data, response status code and response headers
    def update_document_file_with_http_info(document_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.update_document_file ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.update_document_file"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentsApi.update_document_file"
      end
      # resource path
      local_var_path = '/documents/{document_id}/file'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentFileUpdate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.update_document_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#update_document_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Document Url
    # Updates a document from a publicly accessible URL. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [`pending`, `partitioning`, `partitioned`, `refined`, `chunked`, `indexed`, `summary_indexed`, `keyword_indexed`, `ready`, `failed`]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in `indexed` state. However the summary will only be available once the state has changed to `summary_indexed` or `ready`. PDF files over 2000 pages are not supported in hi_res mode.
    # @param document_id [String] The id of the document.
    # @param update_document_from_url_params [UpdateDocumentFromUrlParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentUrlUpdate]
    def update_document_from_url(document_id, update_document_from_url_params, opts = {})
      data, _status_code, _headers = update_document_from_url_with_http_info(document_id, update_document_from_url_params, opts)
      data
    end

    # Update Document Url
    # Updates a document from a publicly accessible URL. On ingest, the document goes through a series of steps before it is ready for retrieval. Each step is reflected in the status of the document which can be one of [&#x60;pending&#x60;, &#x60;partitioning&#x60;, &#x60;partitioned&#x60;, &#x60;refined&#x60;, &#x60;chunked&#x60;, &#x60;indexed&#x60;, &#x60;summary_indexed&#x60;, &#x60;keyword_indexed&#x60;, &#x60;ready&#x60;, &#x60;failed&#x60;]. The document is available for retrieval once it is in ready state. The summary index step can take a few seconds. You can optionally use the document for retrieval once it is in &#x60;indexed&#x60; state. However the summary will only be available once the state has changed to &#x60;summary_indexed&#x60; or &#x60;ready&#x60;. PDF files over 2000 pages are not supported in hi_res mode.
    # @param document_id [String] The id of the document.
    # @param update_document_from_url_params [UpdateDocumentFromUrlParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentUrlUpdate, Integer, Hash)>] DocumentUrlUpdate data, response status code and response headers
    def update_document_from_url_with_http_info(document_id, update_document_from_url_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.update_document_from_url ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.update_document_from_url"
      end
      # verify the required parameter 'update_document_from_url_params' is set
      if @api_client.config.client_side_validation && update_document_from_url_params.nil?
        fail ArgumentError, "Missing the required parameter 'update_document_from_url_params' when calling DocumentsApi.update_document_from_url"
      end
      # resource path
      local_var_path = '/documents/{document_id}/url'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_document_from_url_params)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentUrlUpdate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.update_document_from_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#update_document_from_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Document Raw
    # @param document_id [String] The id of the document.
    # @param update_document_raw_params [UpdateDocumentRawParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [DocumentRawUpdate]
    def update_document_raw(document_id, update_document_raw_params, opts = {})
      data, _status_code, _headers = update_document_raw_with_http_info(document_id, update_document_raw_params, opts)
      data
    end

    # Update Document Raw
    # @param document_id [String] The id of the document.
    # @param update_document_raw_params [UpdateDocumentRawParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partition An optional partition to scope the request to. If omitted, accounts created after 1/9/2025 will have the request scoped to the default partition, while older accounts will have the request scoped to all partitions. Older accounts may opt in to strict partition scoping by contacting support@ragie.ai. Older accounts using the partitions feature are strongly recommended to scope the request to a partition.
    # @return [Array<(DocumentRawUpdate, Integer, Hash)>] DocumentRawUpdate data, response status code and response headers
    def update_document_raw_with_http_info(document_id, update_document_raw_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.update_document_raw ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.update_document_raw"
      end
      # verify the required parameter 'update_document_raw_params' is set
      if @api_client.config.client_side_validation && update_document_raw_params.nil?
        fail ArgumentError, "Missing the required parameter 'update_document_raw_params' when calling DocumentsApi.update_document_raw"
      end
      # resource path
      local_var_path = '/documents/{document_id}/raw'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'partition'] = opts[:'partition'] if !opts[:'partition'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_document_raw_params)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentRawUpdate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.update_document_raw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#update_document_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
