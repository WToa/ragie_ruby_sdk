=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'date'
require 'time'

module RagieRubySdk
  class ConnectionSyncProgressWebhookPayload
    attr_accessor :connection_id

    attr_accessor :sync_id

    attr_accessor :partition

    attr_accessor :connection_metadata

    attr_accessor :create_count

    attr_accessor :created_count

    attr_accessor :update_content_count

    attr_accessor :updated_content_count

    attr_accessor :update_metadata_count

    attr_accessor :updated_metadata_count

    attr_accessor :delete_count

    attr_accessor :deleted_count

    attr_accessor :errored_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'connection_id' => :'connection_id',
        :'sync_id' => :'sync_id',
        :'partition' => :'partition',
        :'connection_metadata' => :'connection_metadata',
        :'create_count' => :'create_count',
        :'created_count' => :'created_count',
        :'update_content_count' => :'update_content_count',
        :'updated_content_count' => :'updated_content_count',
        :'update_metadata_count' => :'update_metadata_count',
        :'updated_metadata_count' => :'updated_metadata_count',
        :'delete_count' => :'delete_count',
        :'deleted_count' => :'deleted_count',
        :'errored_count' => :'errored_count'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'connection_id' => :'String',
        :'sync_id' => :'String',
        :'partition' => :'String',
        :'connection_metadata' => :'Hash<String, Object>',
        :'create_count' => :'Integer',
        :'created_count' => :'Integer',
        :'update_content_count' => :'Integer',
        :'updated_content_count' => :'Integer',
        :'update_metadata_count' => :'Integer',
        :'updated_metadata_count' => :'Integer',
        :'delete_count' => :'Integer',
        :'deleted_count' => :'Integer',
        :'errored_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RagieRubySdk::ConnectionSyncProgressWebhookPayload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RagieRubySdk::ConnectionSyncProgressWebhookPayload`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'connection_id')
        self.connection_id = attributes[:'connection_id']
      else
        self.connection_id = nil
      end

      if attributes.key?(:'sync_id')
        self.sync_id = attributes[:'sync_id']
      else
        self.sync_id = nil
      end

      if attributes.key?(:'partition')
        self.partition = attributes[:'partition']
      else
        self.partition = nil
      end

      if attributes.key?(:'connection_metadata')
        if (value = attributes[:'connection_metadata']).is_a?(Hash)
          self.connection_metadata = value
        end
      else
        self.connection_metadata = nil
      end

      if attributes.key?(:'create_count')
        self.create_count = attributes[:'create_count']
      else
        self.create_count = nil
      end

      if attributes.key?(:'created_count')
        self.created_count = attributes[:'created_count']
      else
        self.created_count = nil
      end

      if attributes.key?(:'update_content_count')
        self.update_content_count = attributes[:'update_content_count']
      else
        self.update_content_count = nil
      end

      if attributes.key?(:'updated_content_count')
        self.updated_content_count = attributes[:'updated_content_count']
      else
        self.updated_content_count = nil
      end

      if attributes.key?(:'update_metadata_count')
        self.update_metadata_count = attributes[:'update_metadata_count']
      else
        self.update_metadata_count = nil
      end

      if attributes.key?(:'updated_metadata_count')
        self.updated_metadata_count = attributes[:'updated_metadata_count']
      else
        self.updated_metadata_count = nil
      end

      if attributes.key?(:'delete_count')
        self.delete_count = attributes[:'delete_count']
      else
        self.delete_count = nil
      end

      if attributes.key?(:'deleted_count')
        self.deleted_count = attributes[:'deleted_count']
      else
        self.deleted_count = nil
      end

      if attributes.key?(:'errored_count')
        self.errored_count = attributes[:'errored_count']
      else
        self.errored_count = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @connection_id.nil?
        invalid_properties.push('invalid value for "connection_id", connection_id cannot be nil.')
      end

      if @sync_id.nil?
        invalid_properties.push('invalid value for "sync_id", sync_id cannot be nil.')
      end

      if @partition.nil?
        invalid_properties.push('invalid value for "partition", partition cannot be nil.')
      end

      if @connection_metadata.nil?
        invalid_properties.push('invalid value for "connection_metadata", connection_metadata cannot be nil.')
      end

      if @create_count.nil?
        invalid_properties.push('invalid value for "create_count", create_count cannot be nil.')
      end

      if @created_count.nil?
        invalid_properties.push('invalid value for "created_count", created_count cannot be nil.')
      end

      if @update_content_count.nil?
        invalid_properties.push('invalid value for "update_content_count", update_content_count cannot be nil.')
      end

      if @updated_content_count.nil?
        invalid_properties.push('invalid value for "updated_content_count", updated_content_count cannot be nil.')
      end

      if @update_metadata_count.nil?
        invalid_properties.push('invalid value for "update_metadata_count", update_metadata_count cannot be nil.')
      end

      if @updated_metadata_count.nil?
        invalid_properties.push('invalid value for "updated_metadata_count", updated_metadata_count cannot be nil.')
      end

      if @delete_count.nil?
        invalid_properties.push('invalid value for "delete_count", delete_count cannot be nil.')
      end

      if @deleted_count.nil?
        invalid_properties.push('invalid value for "deleted_count", deleted_count cannot be nil.')
      end

      if @errored_count.nil?
        invalid_properties.push('invalid value for "errored_count", errored_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @connection_id.nil?
      return false if @sync_id.nil?
      return false if @partition.nil?
      return false if @connection_metadata.nil?
      return false if @create_count.nil?
      return false if @created_count.nil?
      return false if @update_content_count.nil?
      return false if @updated_content_count.nil?
      return false if @update_metadata_count.nil?
      return false if @updated_metadata_count.nil?
      return false if @delete_count.nil?
      return false if @deleted_count.nil?
      return false if @errored_count.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] connection_id Value to be assigned
    def connection_id=(connection_id)
      if connection_id.nil?
        fail ArgumentError, 'connection_id cannot be nil'
      end

      @connection_id = connection_id
    end

    # Custom attribute writer method with validation
    # @param [Object] sync_id Value to be assigned
    def sync_id=(sync_id)
      if sync_id.nil?
        fail ArgumentError, 'sync_id cannot be nil'
      end

      @sync_id = sync_id
    end

    # Custom attribute writer method with validation
    # @param [Object] partition Value to be assigned
    def partition=(partition)
      if partition.nil?
        fail ArgumentError, 'partition cannot be nil'
      end

      @partition = partition
    end

    # Custom attribute writer method with validation
    # @param [Object] connection_metadata Value to be assigned
    def connection_metadata=(connection_metadata)
      if connection_metadata.nil?
        fail ArgumentError, 'connection_metadata cannot be nil'
      end

      @connection_metadata = connection_metadata
    end

    # Custom attribute writer method with validation
    # @param [Object] create_count Value to be assigned
    def create_count=(create_count)
      if create_count.nil?
        fail ArgumentError, 'create_count cannot be nil'
      end

      @create_count = create_count
    end

    # Custom attribute writer method with validation
    # @param [Object] created_count Value to be assigned
    def created_count=(created_count)
      if created_count.nil?
        fail ArgumentError, 'created_count cannot be nil'
      end

      @created_count = created_count
    end

    # Custom attribute writer method with validation
    # @param [Object] update_content_count Value to be assigned
    def update_content_count=(update_content_count)
      if update_content_count.nil?
        fail ArgumentError, 'update_content_count cannot be nil'
      end

      @update_content_count = update_content_count
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_content_count Value to be assigned
    def updated_content_count=(updated_content_count)
      if updated_content_count.nil?
        fail ArgumentError, 'updated_content_count cannot be nil'
      end

      @updated_content_count = updated_content_count
    end

    # Custom attribute writer method with validation
    # @param [Object] update_metadata_count Value to be assigned
    def update_metadata_count=(update_metadata_count)
      if update_metadata_count.nil?
        fail ArgumentError, 'update_metadata_count cannot be nil'
      end

      @update_metadata_count = update_metadata_count
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_metadata_count Value to be assigned
    def updated_metadata_count=(updated_metadata_count)
      if updated_metadata_count.nil?
        fail ArgumentError, 'updated_metadata_count cannot be nil'
      end

      @updated_metadata_count = updated_metadata_count
    end

    # Custom attribute writer method with validation
    # @param [Object] delete_count Value to be assigned
    def delete_count=(delete_count)
      if delete_count.nil?
        fail ArgumentError, 'delete_count cannot be nil'
      end

      @delete_count = delete_count
    end

    # Custom attribute writer method with validation
    # @param [Object] deleted_count Value to be assigned
    def deleted_count=(deleted_count)
      if deleted_count.nil?
        fail ArgumentError, 'deleted_count cannot be nil'
      end

      @deleted_count = deleted_count
    end

    # Custom attribute writer method with validation
    # @param [Object] errored_count Value to be assigned
    def errored_count=(errored_count)
      if errored_count.nil?
        fail ArgumentError, 'errored_count cannot be nil'
      end

      @errored_count = errored_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          connection_id == o.connection_id &&
          sync_id == o.sync_id &&
          partition == o.partition &&
          connection_metadata == o.connection_metadata &&
          create_count == o.create_count &&
          created_count == o.created_count &&
          update_content_count == o.update_content_count &&
          updated_content_count == o.updated_content_count &&
          update_metadata_count == o.update_metadata_count &&
          updated_metadata_count == o.updated_metadata_count &&
          delete_count == o.delete_count &&
          deleted_count == o.deleted_count &&
          errored_count == o.errored_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [connection_id, sync_id, partition, connection_metadata, create_count, created_count, update_content_count, updated_content_count, update_metadata_count, updated_metadata_count, delete_count, deleted_count, errored_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RagieRubySdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
