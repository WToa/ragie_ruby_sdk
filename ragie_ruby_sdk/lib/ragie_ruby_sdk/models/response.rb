=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'date'
require 'time'

module RagieRubySdk
  class Response
    attr_accessor :id

    attr_accessor :object

    attr_accessor :created_at

    attr_accessor :status

    attr_accessor :error

    attr_accessor :incomplete_details

    attr_accessor :instructions

    attr_accessor :max_output_tokens

    attr_accessor :model

    attr_accessor :output

    attr_accessor :output_parsed

    attr_accessor :tools

    attr_accessor :reasoning

    attr_accessor :parallel_tool_calls

    attr_accessor :store

    attr_accessor :temperature

    attr_accessor :previous_response_id

    attr_accessor :tool_choice

    attr_accessor :top_p

    attr_accessor :truncation

    attr_accessor :usage

    attr_accessor :user

    attr_accessor :metadata

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'object' => :'object',
        :'created_at' => :'created_at',
        :'status' => :'status',
        :'error' => :'error',
        :'incomplete_details' => :'incomplete_details',
        :'instructions' => :'instructions',
        :'max_output_tokens' => :'max_output_tokens',
        :'model' => :'model',
        :'output' => :'output',
        :'output_parsed' => :'output_parsed',
        :'tools' => :'tools',
        :'reasoning' => :'reasoning',
        :'parallel_tool_calls' => :'parallel_tool_calls',
        :'store' => :'store',
        :'temperature' => :'temperature',
        :'previous_response_id' => :'previous_response_id',
        :'tool_choice' => :'tool_choice',
        :'top_p' => :'top_p',
        :'truncation' => :'truncation',
        :'usage' => :'usage',
        :'user' => :'user',
        :'metadata' => :'metadata'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'object' => :'String',
        :'created_at' => :'Integer',
        :'status' => :'String',
        :'error' => :'String',
        :'incomplete_details' => :'Object',
        :'instructions' => :'String',
        :'max_output_tokens' => :'Object',
        :'model' => :'String',
        :'output' => :'Array<ResponseOutput>',
        :'output_parsed' => :'FinalAnswer',
        :'tools' => :'Array<Tool>',
        :'reasoning' => :'Reasoning',
        :'parallel_tool_calls' => :'Boolean',
        :'store' => :'Boolean',
        :'temperature' => :'Float',
        :'previous_response_id' => :'String',
        :'tool_choice' => :'String',
        :'top_p' => :'Float',
        :'truncation' => :'String',
        :'usage' => :'RagieApiSchemaResponseUsage',
        :'user' => :'Object',
        :'metadata' => :'Hash<String, Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'error',
        :'incomplete_details',
        :'instructions',
        :'max_output_tokens',
        :'output_parsed',
        :'previous_response_id',
        :'user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RagieRubySdk::Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RagieRubySdk::Response`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = 'response'
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'incomplete_details')
        self.incomplete_details = attributes[:'incomplete_details']
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end

      if attributes.key?(:'max_output_tokens')
        self.max_output_tokens = attributes[:'max_output_tokens']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      else
        self.model = 'deep-search'
      end

      if attributes.key?(:'output')
        if (value = attributes[:'output']).is_a?(Array)
          self.output = value
        end
      else
        self.output = nil
      end

      if attributes.key?(:'output_parsed')
        self.output_parsed = attributes[:'output_parsed']
      end

      if attributes.key?(:'tools')
        if (value = attributes[:'tools']).is_a?(Array)
          self.tools = value
        end
      else
        self.tools = nil
      end

      if attributes.key?(:'reasoning')
        self.reasoning = attributes[:'reasoning']
      else
        self.reasoning = nil
      end

      if attributes.key?(:'parallel_tool_calls')
        self.parallel_tool_calls = attributes[:'parallel_tool_calls']
      else
        self.parallel_tool_calls = false
      end

      if attributes.key?(:'store')
        self.store = attributes[:'store']
      else
        self.store = false
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      else
        self.temperature = 1.0
      end

      if attributes.key?(:'previous_response_id')
        self.previous_response_id = attributes[:'previous_response_id']
      end

      if attributes.key?(:'tool_choice')
        self.tool_choice = attributes[:'tool_choice']
      else
        self.tool_choice = 'auto'
      end

      if attributes.key?(:'top_p')
        self.top_p = attributes[:'top_p']
      else
        self.top_p = 1.0
      end

      if attributes.key?(:'truncation')
        self.truncation = attributes[:'truncation']
      else
        self.truncation = 'disabled'
      end

      if attributes.key?(:'usage')
        self.usage = attributes[:'usage']
      else
        self.usage = nil
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @output.nil?
        invalid_properties.push('invalid value for "output", output cannot be nil.')
      end

      if @tools.nil?
        invalid_properties.push('invalid value for "tools", tools cannot be nil.')
      end

      if @reasoning.nil?
        invalid_properties.push('invalid value for "reasoning", reasoning cannot be nil.')
      end

      if @usage.nil?
        invalid_properties.push('invalid value for "usage", usage cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      object_validator = EnumAttributeValidator.new('String', ["response"])
      return false unless object_validator.valid?(@object)
      return false if @created_at.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["completed", "failed", "in_progress"])
      return false unless status_validator.valid?(@status)
      model_validator = EnumAttributeValidator.new('String', ["deep-search"])
      return false unless model_validator.valid?(@model)
      return false if @output.nil?
      return false if @tools.nil?
      return false if @reasoning.nil?
      tool_choice_validator = EnumAttributeValidator.new('String', ["auto"])
      return false unless tool_choice_validator.valid?(@tool_choice)
      truncation_validator = EnumAttributeValidator.new('String', ["disabled"])
      return false unless truncation_validator.valid?(@truncation)
      return false if @usage.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["response"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["completed", "failed", "in_progress"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] model Object to be assigned
    def model=(model)
      validator = EnumAttributeValidator.new('String', ["deep-search"])
      unless validator.valid?(model)
        fail ArgumentError, "invalid value for \"model\", must be one of #{validator.allowable_values}."
      end
      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] output Value to be assigned
    def output=(output)
      if output.nil?
        fail ArgumentError, 'output cannot be nil'
      end

      @output = output
    end

    # Custom attribute writer method with validation
    # @param [Object] tools Value to be assigned
    def tools=(tools)
      if tools.nil?
        fail ArgumentError, 'tools cannot be nil'
      end

      @tools = tools
    end

    # Custom attribute writer method with validation
    # @param [Object] reasoning Value to be assigned
    def reasoning=(reasoning)
      if reasoning.nil?
        fail ArgumentError, 'reasoning cannot be nil'
      end

      @reasoning = reasoning
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tool_choice Object to be assigned
    def tool_choice=(tool_choice)
      validator = EnumAttributeValidator.new('String', ["auto"])
      unless validator.valid?(tool_choice)
        fail ArgumentError, "invalid value for \"tool_choice\", must be one of #{validator.allowable_values}."
      end
      @tool_choice = tool_choice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] truncation Object to be assigned
    def truncation=(truncation)
      validator = EnumAttributeValidator.new('String', ["disabled"])
      unless validator.valid?(truncation)
        fail ArgumentError, "invalid value for \"truncation\", must be one of #{validator.allowable_values}."
      end
      @truncation = truncation
    end

    # Custom attribute writer method with validation
    # @param [Object] usage Value to be assigned
    def usage=(usage)
      if usage.nil?
        fail ArgumentError, 'usage cannot be nil'
      end

      @usage = usage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          created_at == o.created_at &&
          status == o.status &&
          error == o.error &&
          incomplete_details == o.incomplete_details &&
          instructions == o.instructions &&
          max_output_tokens == o.max_output_tokens &&
          model == o.model &&
          output == o.output &&
          output_parsed == o.output_parsed &&
          tools == o.tools &&
          reasoning == o.reasoning &&
          parallel_tool_calls == o.parallel_tool_calls &&
          store == o.store &&
          temperature == o.temperature &&
          previous_response_id == o.previous_response_id &&
          tool_choice == o.tool_choice &&
          top_p == o.top_p &&
          truncation == o.truncation &&
          usage == o.usage &&
          user == o.user &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, created_at, status, error, incomplete_details, instructions, max_output_tokens, model, output, output_parsed, tools, reasoning, parallel_tool_calls, store, temperature, previous_response_id, tool_choice, top_p, truncation, usage, user, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RagieRubySdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
