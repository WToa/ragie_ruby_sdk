=begin
#Ragie API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'date'
require 'time'

module RagieRubySdk
  class PartitionStats
    # Number of pages processed in the current month in this partition.
    attr_accessor :pages_processed_monthly

    # Number of hosted pages added in the current month in this partition.
    attr_accessor :pages_hosted_monthly

    # Total number of pages processed in this partition.
    attr_accessor :pages_processed_total

    # Total number of hosted pages in this partition.
    attr_accessor :pages_hosted_total

    # Total number of documents, inclusive of all files types, in this partition.
    attr_accessor :document_count

    # Total number of seconds of video processed in the current month in this partition.
    attr_accessor :video_processed_monthly

    # Total number of seconds of video processed in this partition.
    attr_accessor :video_processed_total

    # Total number of seconds of audio processed in the current month in this partition.
    attr_accessor :audio_processed_monthly

    # Total number of seconds of audio processed in this partition.
    attr_accessor :audio_processed_total

    # Total number of MBs streamed in the current month in this partition.
    attr_accessor :media_streamed_monthly

    # Total number of MBs streamed in this partition.
    attr_accessor :media_streamed_total

    # Total number of MBs hosted in the current month in this partition.
    attr_accessor :media_hosted_monthly

    # Total number of MBs hosted in this partition.
    attr_accessor :media_hosted_total

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pages_processed_monthly' => :'pages_processed_monthly',
        :'pages_hosted_monthly' => :'pages_hosted_monthly',
        :'pages_processed_total' => :'pages_processed_total',
        :'pages_hosted_total' => :'pages_hosted_total',
        :'document_count' => :'document_count',
        :'video_processed_monthly' => :'video_processed_monthly',
        :'video_processed_total' => :'video_processed_total',
        :'audio_processed_monthly' => :'audio_processed_monthly',
        :'audio_processed_total' => :'audio_processed_total',
        :'media_streamed_monthly' => :'media_streamed_monthly',
        :'media_streamed_total' => :'media_streamed_total',
        :'media_hosted_monthly' => :'media_hosted_monthly',
        :'media_hosted_total' => :'media_hosted_total'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pages_processed_monthly' => :'Float',
        :'pages_hosted_monthly' => :'Float',
        :'pages_processed_total' => :'Float',
        :'pages_hosted_total' => :'Float',
        :'document_count' => :'Integer',
        :'video_processed_monthly' => :'Float',
        :'video_processed_total' => :'Float',
        :'audio_processed_monthly' => :'Float',
        :'audio_processed_total' => :'Float',
        :'media_streamed_monthly' => :'Float',
        :'media_streamed_total' => :'Float',
        :'media_hosted_monthly' => :'Float',
        :'media_hosted_total' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RagieRubySdk::PartitionStats` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RagieRubySdk::PartitionStats`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pages_processed_monthly')
        self.pages_processed_monthly = attributes[:'pages_processed_monthly']
      else
        self.pages_processed_monthly = nil
      end

      if attributes.key?(:'pages_hosted_monthly')
        self.pages_hosted_monthly = attributes[:'pages_hosted_monthly']
      else
        self.pages_hosted_monthly = nil
      end

      if attributes.key?(:'pages_processed_total')
        self.pages_processed_total = attributes[:'pages_processed_total']
      else
        self.pages_processed_total = nil
      end

      if attributes.key?(:'pages_hosted_total')
        self.pages_hosted_total = attributes[:'pages_hosted_total']
      else
        self.pages_hosted_total = nil
      end

      if attributes.key?(:'document_count')
        self.document_count = attributes[:'document_count']
      else
        self.document_count = nil
      end

      if attributes.key?(:'video_processed_monthly')
        self.video_processed_monthly = attributes[:'video_processed_monthly']
      else
        self.video_processed_monthly = nil
      end

      if attributes.key?(:'video_processed_total')
        self.video_processed_total = attributes[:'video_processed_total']
      else
        self.video_processed_total = nil
      end

      if attributes.key?(:'audio_processed_monthly')
        self.audio_processed_monthly = attributes[:'audio_processed_monthly']
      else
        self.audio_processed_monthly = nil
      end

      if attributes.key?(:'audio_processed_total')
        self.audio_processed_total = attributes[:'audio_processed_total']
      else
        self.audio_processed_total = nil
      end

      if attributes.key?(:'media_streamed_monthly')
        self.media_streamed_monthly = attributes[:'media_streamed_monthly']
      else
        self.media_streamed_monthly = nil
      end

      if attributes.key?(:'media_streamed_total')
        self.media_streamed_total = attributes[:'media_streamed_total']
      else
        self.media_streamed_total = nil
      end

      if attributes.key?(:'media_hosted_monthly')
        self.media_hosted_monthly = attributes[:'media_hosted_monthly']
      else
        self.media_hosted_monthly = nil
      end

      if attributes.key?(:'media_hosted_total')
        self.media_hosted_total = attributes[:'media_hosted_total']
      else
        self.media_hosted_total = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @pages_processed_monthly.nil?
        invalid_properties.push('invalid value for "pages_processed_monthly", pages_processed_monthly cannot be nil.')
      end

      if @pages_hosted_monthly.nil?
        invalid_properties.push('invalid value for "pages_hosted_monthly", pages_hosted_monthly cannot be nil.')
      end

      if @pages_processed_total.nil?
        invalid_properties.push('invalid value for "pages_processed_total", pages_processed_total cannot be nil.')
      end

      if @pages_hosted_total.nil?
        invalid_properties.push('invalid value for "pages_hosted_total", pages_hosted_total cannot be nil.')
      end

      if @document_count.nil?
        invalid_properties.push('invalid value for "document_count", document_count cannot be nil.')
      end

      if @video_processed_monthly.nil?
        invalid_properties.push('invalid value for "video_processed_monthly", video_processed_monthly cannot be nil.')
      end

      if @video_processed_total.nil?
        invalid_properties.push('invalid value for "video_processed_total", video_processed_total cannot be nil.')
      end

      if @audio_processed_monthly.nil?
        invalid_properties.push('invalid value for "audio_processed_monthly", audio_processed_monthly cannot be nil.')
      end

      if @audio_processed_total.nil?
        invalid_properties.push('invalid value for "audio_processed_total", audio_processed_total cannot be nil.')
      end

      if @media_streamed_monthly.nil?
        invalid_properties.push('invalid value for "media_streamed_monthly", media_streamed_monthly cannot be nil.')
      end

      if @media_streamed_total.nil?
        invalid_properties.push('invalid value for "media_streamed_total", media_streamed_total cannot be nil.')
      end

      if @media_hosted_monthly.nil?
        invalid_properties.push('invalid value for "media_hosted_monthly", media_hosted_monthly cannot be nil.')
      end

      if @media_hosted_total.nil?
        invalid_properties.push('invalid value for "media_hosted_total", media_hosted_total cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @pages_processed_monthly.nil?
      return false if @pages_hosted_monthly.nil?
      return false if @pages_processed_total.nil?
      return false if @pages_hosted_total.nil?
      return false if @document_count.nil?
      return false if @video_processed_monthly.nil?
      return false if @video_processed_total.nil?
      return false if @audio_processed_monthly.nil?
      return false if @audio_processed_total.nil?
      return false if @media_streamed_monthly.nil?
      return false if @media_streamed_total.nil?
      return false if @media_hosted_monthly.nil?
      return false if @media_hosted_total.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pages_processed_monthly Value to be assigned
    def pages_processed_monthly=(pages_processed_monthly)
      if pages_processed_monthly.nil?
        fail ArgumentError, 'pages_processed_monthly cannot be nil'
      end

      @pages_processed_monthly = pages_processed_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] pages_hosted_monthly Value to be assigned
    def pages_hosted_monthly=(pages_hosted_monthly)
      if pages_hosted_monthly.nil?
        fail ArgumentError, 'pages_hosted_monthly cannot be nil'
      end

      @pages_hosted_monthly = pages_hosted_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] pages_processed_total Value to be assigned
    def pages_processed_total=(pages_processed_total)
      if pages_processed_total.nil?
        fail ArgumentError, 'pages_processed_total cannot be nil'
      end

      @pages_processed_total = pages_processed_total
    end

    # Custom attribute writer method with validation
    # @param [Object] pages_hosted_total Value to be assigned
    def pages_hosted_total=(pages_hosted_total)
      if pages_hosted_total.nil?
        fail ArgumentError, 'pages_hosted_total cannot be nil'
      end

      @pages_hosted_total = pages_hosted_total
    end

    # Custom attribute writer method with validation
    # @param [Object] document_count Value to be assigned
    def document_count=(document_count)
      if document_count.nil?
        fail ArgumentError, 'document_count cannot be nil'
      end

      @document_count = document_count
    end

    # Custom attribute writer method with validation
    # @param [Object] video_processed_monthly Value to be assigned
    def video_processed_monthly=(video_processed_monthly)
      if video_processed_monthly.nil?
        fail ArgumentError, 'video_processed_monthly cannot be nil'
      end

      @video_processed_monthly = video_processed_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] video_processed_total Value to be assigned
    def video_processed_total=(video_processed_total)
      if video_processed_total.nil?
        fail ArgumentError, 'video_processed_total cannot be nil'
      end

      @video_processed_total = video_processed_total
    end

    # Custom attribute writer method with validation
    # @param [Object] audio_processed_monthly Value to be assigned
    def audio_processed_monthly=(audio_processed_monthly)
      if audio_processed_monthly.nil?
        fail ArgumentError, 'audio_processed_monthly cannot be nil'
      end

      @audio_processed_monthly = audio_processed_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] audio_processed_total Value to be assigned
    def audio_processed_total=(audio_processed_total)
      if audio_processed_total.nil?
        fail ArgumentError, 'audio_processed_total cannot be nil'
      end

      @audio_processed_total = audio_processed_total
    end

    # Custom attribute writer method with validation
    # @param [Object] media_streamed_monthly Value to be assigned
    def media_streamed_monthly=(media_streamed_monthly)
      if media_streamed_monthly.nil?
        fail ArgumentError, 'media_streamed_monthly cannot be nil'
      end

      @media_streamed_monthly = media_streamed_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] media_streamed_total Value to be assigned
    def media_streamed_total=(media_streamed_total)
      if media_streamed_total.nil?
        fail ArgumentError, 'media_streamed_total cannot be nil'
      end

      @media_streamed_total = media_streamed_total
    end

    # Custom attribute writer method with validation
    # @param [Object] media_hosted_monthly Value to be assigned
    def media_hosted_monthly=(media_hosted_monthly)
      if media_hosted_monthly.nil?
        fail ArgumentError, 'media_hosted_monthly cannot be nil'
      end

      @media_hosted_monthly = media_hosted_monthly
    end

    # Custom attribute writer method with validation
    # @param [Object] media_hosted_total Value to be assigned
    def media_hosted_total=(media_hosted_total)
      if media_hosted_total.nil?
        fail ArgumentError, 'media_hosted_total cannot be nil'
      end

      @media_hosted_total = media_hosted_total
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pages_processed_monthly == o.pages_processed_monthly &&
          pages_hosted_monthly == o.pages_hosted_monthly &&
          pages_processed_total == o.pages_processed_total &&
          pages_hosted_total == o.pages_hosted_total &&
          document_count == o.document_count &&
          video_processed_monthly == o.video_processed_monthly &&
          video_processed_total == o.video_processed_total &&
          audio_processed_monthly == o.audio_processed_monthly &&
          audio_processed_total == o.audio_processed_total &&
          media_streamed_monthly == o.media_streamed_monthly &&
          media_streamed_total == o.media_streamed_total &&
          media_hosted_monthly == o.media_hosted_monthly &&
          media_hosted_total == o.media_hosted_total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pages_processed_monthly, pages_hosted_monthly, pages_processed_total, pages_hosted_total, document_count, video_processed_monthly, video_processed_total, audio_processed_monthly, audio_processed_total, media_streamed_monthly, media_streamed_total, media_hosted_monthly, media_hosted_total].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RagieRubySdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
